// Given a Binary Search Tree and a key, return the ceiling of the given key in the Binary Search Tree.
// Input:Binary Search Tree: 10 5 13 3 6 11 14 2 4 -1 9, Key = 8
// Output:9

int findCeil(TreeNode* root, int key){
        // Initialize the variable
        // to store the ceiling value
        int ceil = -1; 
        
        // Traverse the BST until reaching
        // the end or finding the key
        while(root){
             // If the key is found, assign it
             // as the ceiling and return
            if(root->val == key){
                ceil = root->val;
                return ceil;
            } 
            
             // If the key is greater,
             // move to the right subtree
            if(key > root->val){
                root = root->right;
            }
            else{ 
                // If the key is smaller, update ceil
                // and move to the left subtree
                ceil = root->val;
                root = root->left;
            }
        }
         // Return the computed ceiling value
        return ceil;
    }


// Given a Binary Search Tree and a key, return the floor of the given key in the Binary Search Tree.
// Binary Search Tree: 10 5 15 2 6 -1 -1, Key = 7
// Output:6

int floorInBST(TreeNode* root, int key){
        // Initialize the floor variable
        // to store the floor value
        int floor = -1;
        
        // Traverse the BST until reaching
        // the endor finding the key
        while(root){
            // If the key is found, assign it 
            // as the floor value and return
            if(root->val == key){
                floor = root->val;
                return floor;
            }
            
            // If the key is greater than the current
            // node's value, move to the right subtree
            if(key > root->val){
                // Update the floor with the current node's
                // value and move to the right subtree
                floor = root->val;
                root = root->right;
            }
            else{
                // If the key is smaller than the current
                // node's value, move to the left subtree
                root = root->left;
            }
        }
        // Return the computed floor value
        return floor;
    }

// Given a Binary Search Tree and an integer ‘K’. Find and return the ‘K-th’ smallest and ‘K-th’ largest element in the given Binary Search Tree.
// Definition of TreeNode structure
// for a binary tree node
struct TreeNode {
    // Value of the node
    int val;
    
    // Pointer to the left child node
    TreeNode* left;
    
    // Pointer to the right child node
    TreeNode* right;

    // Constructor to initialize the node with a
    // value and set left and right pointers to null
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
private:
    // Helper function to perform reverse inorder
    // traversal to find Kth largest element
    void reverseInorder(TreeNode* node, int& counter, int k, int& kLargest) {
        if (!node || counter >= k) return;

        // Traverse right subtree
        reverseInorder(node->right, counter, k, kLargest);

        // Increment counter after
        // visiting right subtree
        counter++;

        // Check if current node
        // is the Kth largest
        if (counter == k) {
            kLargest = node->val;
            return;
        }

        // Traverse left subtree if
        // Kth largest is not found yet
        reverseInorder(node->left, counter, k, kLargest);
    }

    // Helper function to perform inorder
    // traversal to find Kth smallest element
    void inorder(TreeNode* node, int& counter, int k, int& kSmallest) {
        if (!node || counter >= k) return;

        // Traverse left subtree
        inorder(node->left, counter, k, kSmallest);

        // Increment counter after visiting left subtree
        counter++;

        // Check if current node is the Kth smallest
        if (counter == k) {
            kSmallest = node->val;
            return;
        }

        // Traverse right subtree if
        // Kth smallest is not found yet
        inorder(node->right, counter, k, kSmallest);
    }

public:
    pair<int, int> findKth(TreeNode* root, int k) {
        int kSmallest = INT_MIN, kLargest = INT_MIN;
        // Counter to track visited nodes
        int counter = 0; 

        // Find Kth smallest element
        // (perform inorder traversal)
        inorder(root, counter, k, kSmallest);
        
        // Reset counter for Kth largest element
        counter = 0; 
        // Find Kth largest element
        // (perform reverse inorder traversal)
        reverseInorder(root, counter, k, kLargest);

        return make_pair(kSmallest, kLargest);
    }
};

// Function to perform an in-order traversal
// of a binary tree and print its nodes
void printInOrder(TreeNode* root) {
    // Check if the current node
    // is null (base case for recursion)
    if (root == nullptr) {
        // If null, return and
        // terminate the function
        return;
    }

    // Recursively call printInOrder
    // for the left subtree
    printInOrder(root->left);

    // Print the value of the current node
    cout << root->val << " ";

    // Recursively call printInOrder
    // for the right subtree
    printInOrder(root->right);


Given a binary tree. Find the size of its largest subtree which is a Binary Search Tree.
Note: Here Size equals the number of nodes in the subtree.

Examples :

Input:   1
        /  \
        4   4              
       / \ 
      6   8
Output: 1 
Explanation: There's no sub-tree with size greater than 1 which forms a BST. All the leaf Nodes are the BSTs with size equal to 1.

class Result {
    
    public:
    
    int size;
    int min, max;
    
    Result(int size, int min, int max) {
        this->size = size;
        this->min = min;
        this->max = max;
    }
};

class Solution {
    
    private:
    
    Result solve(Node *root) {
        
        if (!root){
            return Result(0, INT_MAX, INT_MIN);
        }
        
        Result left = solve(root->left);
        Result right = solve(root->right);
        
        if (root->data > left.max && root->data < right.min) {
            return Result(
                1 + left.size + right.size,
                min(root->data, left.min),
                max(root->data, right.max)
            );
        }
        
        return Result(max(left.size, right.size), INT_MIN, INT_MAX);
    }
    
    public:
    
    int largestBst(Node *root) {
        return solve(root).size;
    }
};


// You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
 TreeNode *first = nullptr;
    TreeNode *second = nullptr;
    TreeNode *previous = new TreeNode(INT_MIN); // Renamed from 'prev' to 'previous'
void inorder(TreeNode* root) {
        if (!root) return;

        // Inorder traversal: left subtree -> root -> right subtree
        inorder(root->left);

        // Check if we found a violation where previous->val is greater than root->val
        if (previous && previous->val > root->val) { // Use 'previous' instead of 'prev'
            // If this is the first violation, mark 'first' and 'second' nodes
            if (!first) first = previous;
            // Mark the 'second' node where the violation occurs again
            second = root;
        }

        // Update previous node to current node
        previous = root;

        inorder(root->right);
    }

    void recoverTree(TreeNode* root) {
           // Perform inorder traversal to find the two swapped nodes
        inorder(root);

        // Swap the values of the two incorrect nodes
        if (first && second) {
            swap(first->val, second->val);
        }
    }
};

// Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.
 //using 2 pointers -> TC = SC = O(N) -> SINCE IN BST Inorder is sorted to store that and apply 2 pointers
    void inorder(TreeNode* root, vector<int> &v){
        if(!root){
            return;
        }
        
        inorder(root -> left, v);

        v.push_back(root -> val);

        inorder(root -> right, v);

    }

    bool findTarget(TreeNode* root, int k) {
        vector<int> v;
        inorder(root, v);

        int s = 0, e = v.size()-1;
        while(s < e){
            if(v[s] + v[e] == k){
                return true;
            }
            else if(v[s] + v[e] < k){
                s++;
            }
            else{
                e--;
            }
        }
        return false;
    }




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 // Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.
class BSTIterator {
    stack<TreeNode *> myStack;
public:
    BSTIterator(TreeNode *root) {
        pushAll(root);
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !myStack.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode *tmpNode = myStack.top();
        myStack.pop();
        pushAll(tmpNode->right);
        return tmpNode->val;
    }

private:
    void pushAll(TreeNode *node) {
        for (; node != NULL; myStack.push(node), node = node->left);
    }
};


// Inorder Successor/Predecessor in BST
struct Node
{
    int key;
    Node *left, *right;
    Node(int item) {
        key = item;
        left = nullptr;
        right = nullptr;
    }
};
// Function to find the predecessor and successor
// of a given key in BST
void findPreSuc(Node* root, int key, Node*& pre, 
                                     Node*& suc)
{
    // If root is null, return
    if (!root)
        return;

    // Traverse the left subtree
    findPreSuc(root->left, key, pre, suc);

    // The first greater value seen is successor
    if (root->key > key)
    {        
        if (!suc || (suc && suc->key > root->key))
            suc = root;
    }
  
    // The last smaller value seen is predecessor
    else if (root->key < key)
        pre = root;

    // Traverse the right subtree
    findPreSuc(root->right, key, pre, suc);
}

// A utility function to insert a new node with
// given key in BST
Node* insert(Node* node, int key)
{
    if (node == nullptr) return new Node(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else
        node->right = insert(node->right, key);
    return node;
}

// Construct Binary Search Tree from Preorder Traversal
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root = nullptr;
        for(int i = 0; i < preorder.size(); i++) {
            root = insert(root, preorder[i]);
        }
        return root;
    }

    TreeNode* insert(TreeNode* root, int d) {
        // Create a new node if the root is null
        if(root == nullptr) {
            return new TreeNode(d);
        }
        // Recursively insert into the left or right subtree
        if(d < root->val) {
            root->left = insert(root->left, d);
        } else {
            root->right = insert(root->right, d);
        }
        return root;
    }
};

//  Lowest Common Ancestor of a Binary Search Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (!root)
            return NULL;
        // both in left
        if (p->val < root->val && q->val < root->val) {
            TreeNode* leftAns = lowestCommonAncestor(root->left, p, q);
            if (leftAns)
                return leftAns;
        }
        // both in right
        if (p->val > root->val && q->val > root->val) {
            TreeNode* rightAns = lowestCommonAncestor(root->right, p, q);
            if (rightAns)
                return rightAns;
        }
        return root;
    }
};


// check if a bt is a binary search tree
class Solution {

bool isPossible(TreeNode* root, long long l, long long r){
    if(root == nullptr)  return true;
    if(root->val < r and root->val > l)
        return isPossible(root->left, l, root->val) and 
                                isPossible(root->right, root->val, r);
    else return false;
}

public:
    bool isValidBST(TreeNode* root) {
        long long int min = -1000000000000, max = 1000000000000;
        return isPossible(root, min, max);
    }
};


// delete a node in a BST
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    // Function to find the in-order successor (smallest node in the right subtree)
    TreeNode* successor(TreeNode* root) {
        while (root->left != NULL) {
            root = root->left;
        }
        return root;
    }
    
    // Function to delete a node in the BST
    TreeNode* deleteNode(TreeNode* root, int key) {
        // Base case: if the tree is empty
        if (root == NULL) return NULL;
        
        // If the key is greater, delete from the right subtree
        else if (root->val < key) root->right = deleteNode(root->right, key);
        
        // If the key is smaller, delete from the left subtree
        else if (root->val > key) root->left = deleteNode(root->left, key);
        
        // If the node to be deleted is found
        else {
            // Case 1: No children (leaf node)
            if (root->left == NULL && root->right == NULL) return NULL;
            
            // Case 2: Only one child
            else if (root->left == NULL) return root->right; // Only right child
            else if (root->right == NULL) return root->left; // Only left child
            
            // Case 3: Two children
            TreeNode* temp = successor(root->right); // Find the in-order successor
            root->val = temp->val; // Replace the node's value with the successor's value
            root->right = deleteNode(root->right, temp->val); // Delete the successor node
        }
        
        return root; // Return the modified tree
    }
};


// Insert into a Binary Search Tree
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root == NULL) return new TreeNode(val);

        if(root->val < val) {
            if(root->right == NULL) root->right = new TreeNode(val);
            else insertIntoBST(root->right, val);
        }
        else {
            if(root->left == NULL) root->left = new TreeNode(val);
            else insertIntoBST(root->left, val);
        }

        return root;
    }
};